name: JavaScript/TypeScript Quality Checks

on:
  push:
    branches: [ main, develop ]
    paths:
      - '**/*.js'
      - '**/*.jsx'
      - '**/*.ts'
      - '**/*.tsx'
      - 'package.json'
      - 'package-lock.json'
      - 'yarn.lock'
      - 'pnpm-lock.yaml'
      - '.eslintrc*'
      - 'tsconfig*.json'
      - 'complete-quality-suite/editions/javascript/**'
  pull_request:
    branches: [ main, develop ]
    paths:
      - '**/*.js'
      - '**/*.jsx'
      - '**/*.ts'
      - '**/*.tsx'
      - 'package.json'
      - 'package-lock.json'
      - 'yarn.lock'
      - 'pnpm-lock.yaml'
      - '.eslintrc*'
      - 'tsconfig*.json'
      - 'complete-quality-suite/editions/javascript/**'

concurrency:
  group: js-quality-${{ github.ref }}
  cancel-in-progress: true

jobs:
  quality-checks:
    name: Quality Checks
    runs-on: ubuntu-latest
    timeout-minutes: 15

    strategy:
      matrix:
        node-version: [18, 20]
      fail-fast: false

    steps:
      - name: üîÑ Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: üü¢ Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
          cache-dependency-path: |
            package-lock.json
            */package-lock.json

      - name: üì¶ Cache npm dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.npm
            node_modules
            */node_modules
          key: ${{ runner.os }}-npm-${{ matrix.node-version }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-npm-${{ matrix.node-version }}-
            ${{ runner.os }}-npm-

      - name: üîß Install Dependencies
        run: |
          npm ci --prefer-offline --no-audit
          # Install global tools if needed
          npm install -g typescript ts-node

      - name: üîç Cache ESLint
        uses: actions/cache@v4
        with:
          path: .eslintcache
          key: ${{ runner.os }}-eslint-${{ hashFiles('**/.eslintrc*', '**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-eslint-

      - name: üé® Code Formatting Check
        run: |
          echo "üé® Checking code formatting with Prettier..."
          npx prettier --check "src/**/*.{js,jsx,ts,tsx,json,css,md}" || {
            echo "‚ùå Formatting issues found. Run 'npm run format' to fix."
            exit 1
          }

      - name: üìè ESLint Analysis
        run: |
          echo "üìè Running ESLint analysis..."
          npx eslint . --ext .js,.jsx,.ts,.tsx --cache --cache-location .eslintcache --format=compact || {
            echo "‚ùå ESLint issues found. Run 'npm run lint -- --fix' to auto-fix."
            exit 1
          }

      - name: üî§ TypeScript Type Checking
        if: hashFiles('tsconfig.json') != ''
        run: |
          echo "üî§ Running TypeScript type checking..."
          npx tsc --noEmit || {
            echo "‚ùå TypeScript type errors found."
            exit 1
          }

      - name: üßπ Dead Code Detection
        run: |
          echo "üßπ Detecting dead code with ts-prune..."
          npx ts-prune --ignore "src/**/*.test.ts|src/**/*.spec.ts" || {
            echo "‚ö†Ô∏è  Dead code detected but not failing build"
          }

      - name: üîí Security Analysis
        run: |
          echo "üîí Running security analysis..."
          npm audit --audit-level=high || {
            echo "‚ùå High-severity vulnerabilities found. Run 'npm audit fix' to resolve."
            exit 1
          }

      - name: üìä Code Complexity Analysis
        run: |
          echo "üìä Analyzing code complexity..."
          if [ -f "complete-quality-suite/editions/javascript/quality-check.js" ]; then
            node complete-quality-suite/editions/javascript/quality-check.js eslint-complexity || {
              echo "‚ö†Ô∏è  High complexity detected but not failing build"
            }
          fi

      - name: üìã Code Duplication Check
        run: |
          echo "üìã Checking for code duplication..."
          if [ -f "complete-quality-suite/editions/javascript/duplication-check.js" ]; then
            node complete-quality-suite/editions/javascript/duplication-check.js || {
              echo "‚ö†Ô∏è  Code duplication detected but not failing build"
            }
          fi

      - name: üìà Maintainability Analysis
        run: |
          echo "üìà Analyzing maintainability..."
          if [ -f "complete-quality-suite/editions/javascript/maintainability-check.js" ]; then
            node complete-quality-suite/editions/javascript/maintainability-check.js || {
              echo "‚ö†Ô∏è  Low maintainability detected but not failing build"
            }
          fi

      - name: üß™ Unit Tests
        run: |
          echo "üß™ Running unit tests..."
          if npm run test --if-present; then
            echo "‚úÖ All tests passed"
          else
            echo "‚ùå Some tests failed"
            exit 1
          fi

      - name: üìä Upload Coverage Reports
        if: hashFiles('coverage/lcov.info') != ''
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage/lcov.info
          fail_ci_if_error: false
          verbose: true

      - name: üìù Generate Quality Report
        if: always()
        run: |
          echo "üìù Generating quality report..."
          mkdir -p reports
          echo "# Quality Report - Node.js ${{ matrix.node-version }}" > reports/quality-report.md
          echo "Generated on: $(date)" >> reports/quality-report.md
          echo "" >> reports/quality-report.md
          
          # Add results summary
          if [ "${{ job.status }}" == "success" ]; then
            echo "‚úÖ **Status**: PASSED" >> reports/quality-report.md
          else
            echo "‚ùå **Status**: FAILED" >> reports/quality-report.md
          fi

      - name: üì§ Upload Quality Reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: quality-reports-node-${{ matrix.node-version }}
          path: |
            reports/
            coverage/
            .eslintcache
          retention-days: 7

  # Separate job for performance checks
  performance-analysis:
    name: Performance Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 10
    if: github.event_name == 'pull_request'

    steps:
      - name: üîÑ Checkout Repository
        uses: actions/checkout@v4

      - name: üü¢ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - name: üì¶ Install Dependencies
        run: npm ci --prefer-offline --no-audit

      - name: üöÄ Bundle Size Analysis
        run: |
          echo "üöÄ Analyzing bundle size..."
          if npm run build --if-present; then
            # Check if build output exists
            if [ -d "dist" ] || [ -d "build" ] || [ -d ".next" ]; then
              echo "‚úÖ Build successful - bundle analysis available"
              
              # Basic size check
              find dist build .next -name "*.js" -o -name "*.css" 2>/dev/null | while read file; do
                size=$(stat -c%s "$file" 2>/dev/null || stat -f%z "$file" 2>/dev/null || echo "0")
                echo "üìÅ $file: $(($size / 1024))KB"
              done
            fi
          else
            echo "‚ö†Ô∏è  No build script found - skipping bundle analysis"
          fi

  # Summary job that depends on all checks
  quality-summary:
    name: Quality Summary
    runs-on: ubuntu-latest
    needs: [quality-checks, performance-analysis]
    if: always()

    steps:
      - name: üìä Quality Check Summary
        run: |
          echo "üìä JavaScript/TypeScript Quality Check Summary"
          echo "=============================================="
          
          if [ "${{ needs.quality-checks.result }}" == "success" ]; then
            echo "‚úÖ Quality checks: PASSED"
          else
            echo "‚ùå Quality checks: FAILED"
          fi
          
          if [ "${{ needs.performance-analysis.result }}" == "success" ] || [ "${{ needs.performance-analysis.result }}" == "skipped" ]; then
            echo "‚úÖ Performance analysis: OK"
          else
            echo "‚ùå Performance analysis: FAILED"
          fi
          
          # Fail if quality checks failed (but allow performance to be optional)
          if [ "${{ needs.quality-checks.result }}" != "success" ]; then
            echo "‚ùå Overall result: FAILED"
            exit 1
          else
            echo "‚úÖ Overall result: PASSED"
          fi 