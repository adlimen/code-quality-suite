#!/usr/bin/env bash

# Complete Quality Suite - Python Edition Pre-commit Hook
# Runs essential quality checks on staged Python files

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Emojis
CHECK="✅"
ERROR="❌"
WARNING="⚠️"
INFO="ℹ️"
ROCKET="🚀"

echo -e "${CYAN}${ROCKET} Complete Quality Suite - Python Pre-commit Hook${NC}"
echo "========================================================"

# Check if this is a Python project
if ! ls *.py src/*.py 2>/dev/null | head -1 > /dev/null; then
    echo -e "${INFO} No Python files found, skipping Python quality checks"
    exit 0
fi

# Check if Python quality tools are available
PYTHON_QUALITY_SCRIPT="complete-quality-suite/editions/python/python-quality-check.py"

if [ ! -f "$PYTHON_QUALITY_SCRIPT" ]; then
    echo -e "${WARNING} Python Quality Suite not found at $PYTHON_QUALITY_SCRIPT"
    echo "Falling back to individual tool checks..."
    
    # Fallback to individual tools
    FAILED=0
    
    # Check Black
    if command -v black > /dev/null; then
        echo -e "${INFO} Running Black formatting check..."
        if ! black --check --diff .; then
            echo -e "${ERROR} Black formatting check failed"
            echo -e "${INFO} Run 'black .' to fix formatting issues"
            FAILED=1
        else
            echo -e "${CHECK} Black formatting check passed"
        fi
    fi
    
    # Check isort
    if command -v isort > /dev/null; then
        echo -e "${INFO} Running isort import check..."
        if ! isort --check --diff .; then
            echo -e "${ERROR} isort import check failed"
            echo -e "${INFO} Run 'isort .' to fix import issues"
            FAILED=1
        else
            echo -e "${CHECK} isort import check passed"
        fi
    fi
    
    # Check Ruff
    if command -v ruff > /dev/null; then
        echo -e "${INFO} Running Ruff linting..."
        if ! ruff check .; then
            echo -e "${ERROR} Ruff linting failed"
            echo -e "${INFO} Run 'ruff check --fix .' to fix linting issues"
            FAILED=1
        else
            echo -e "${CHECK} Ruff linting passed"
        fi
    fi
    
    if [ $FAILED -eq 1 ]; then
        echo -e "\n${ERROR} Pre-commit checks failed!"
        echo -e "${INFO} Please fix the issues above and try committing again"
        exit 1
    fi
    
    echo -e "\n${CHECK} All available pre-commit checks passed!"
    exit 0
fi

# Get list of staged Python files
STAGED_PYTHON_FILES=$(git diff --cached --name-only --diff-filter=ACM | grep -E "\.(py)$" || true)

if [ -z "$STAGED_PYTHON_FILES" ]; then
    echo -e "${INFO} No staged Python files found, skipping quality checks"
    exit 0
fi

echo -e "${INFO} Found staged Python files:"
echo "$STAGED_PYTHON_FILES" | sed 's/^/  - /'
echo ""

# Run essential quality checks with auto-fix
echo -e "${INFO} Running essential Python quality checks with auto-fix..."

# Check if we're in a virtual environment
if [ -z "$VIRTUAL_ENV" ]; then
    echo -e "${WARNING} No virtual environment detected"
    echo -e "${INFO} Consider activating your virtual environment for consistent tool versions"
fi

# Run the quality checks
if python "$PYTHON_QUALITY_SCRIPT" required --fix --quiet; then
    echo -e "${CHECK} Essential quality checks passed!"
    
    # Check if any files were modified by auto-fix
    MODIFIED_FILES=$(git diff --name-only)
    if [ -n "$MODIFIED_FILES" ]; then
        echo -e "${INFO} The following files were auto-fixed:"
        echo "$MODIFIED_FILES" | sed 's/^/  - /'
        echo ""
        echo -e "${WARNING} Files were modified by auto-fix. Please review changes and re-stage them."
        echo -e "${INFO} Run 'git add .' to stage the fixes, then commit again"
        exit 1
    fi
    
else
    echo -e "${ERROR} Essential quality checks failed!"
    echo -e "${INFO} Please fix the issues reported above"
    echo ""
    echo -e "${INFO} You can:"
    echo -e "  1. Run 'python $PYTHON_QUALITY_SCRIPT required --fix' to auto-fix issues"
    echo -e "  2. Fix issues manually and try committing again"
    echo -e "  3. Run 'python $PYTHON_QUALITY_SCRIPT all --verbose' for detailed analysis"
    exit 1
fi

echo -e "\n${ROCKET} Pre-commit quality checks completed successfully!"
echo -e "${INFO} Your code meets the essential quality standards"