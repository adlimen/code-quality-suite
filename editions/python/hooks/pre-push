#!/usr/bin/env bash

# Complete Quality Suite - Python Edition Pre-push Hook
# Runs comprehensive quality checks before pushing to remote

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Emojis
CHECK="✅"
ERROR="❌"
WARNING="⚠️"
INFO="ℹ️"
ROCKET="🚀"
SHIELD="🔒"
MAGNIFYING="🔍"

echo -e "${CYAN}${ROCKET} Complete Quality Suite - Python Pre-push Hook${NC}"
echo "========================================================"

# Check if this is a Python project
if ! ls *.py src/*.py 2>/dev/null | head -1 > /dev/null; then
    echo -e "${INFO} No Python files found, skipping Python quality checks"
    exit 0
fi

# Check if Python quality tools are available
PYTHON_QUALITY_SCRIPT="complete-quality-suite/editions/python/python-quality-check.py"

if [ ! -f "$PYTHON_QUALITY_SCRIPT" ]; then
    echo -e "${WARNING} Python Quality Suite not found at $PYTHON_QUALITY_SCRIPT"
    echo -e "${INFO} Skipping comprehensive quality checks"
    exit 0
fi

# Check if we're in a virtual environment
if [ -z "$VIRTUAL_ENV" ]; then
    echo -e "${WARNING} No virtual environment detected"
    echo -e "${INFO} Consider activating your virtual environment for consistent tool versions"
fi

# Get current branch info
CURRENT_BRANCH=$(git rev-parse --abbrev-ref HEAD)
echo -e "${INFO} Current branch: ${BLUE}$CURRENT_BRANCH${NC}"

# Check for uncommitted changes
if ! git diff-index --quiet HEAD --; then
    echo -e "${WARNING} You have uncommitted changes"
    echo -e "${INFO} Consider committing or stashing your changes before pushing"
    echo ""
fi

# Run comprehensive quality checks
echo -e "${MAGNIFYING} Running comprehensive Python quality analysis..."
echo ""

# Start timing
START_TIME=$(date +%s)

# Run all quality checks (no auto-fix for pre-push)
if python "$PYTHON_QUALITY_SCRIPT" all --quiet; then
    END_TIME=$(date +%s)
    DURATION=$((END_TIME - START_TIME))
    
    echo -e "${CHECK} All quality checks passed! (${DURATION}s)"
    
    # Run additional security analysis
    echo -e "\n${SHIELD} Running security analysis..."
    if python "$PYTHON_QUALITY_SCRIPT" security --quiet; then
        echo -e "${CHECK} Security analysis passed!"
    else
        echo -e "${ERROR} Security analysis failed!"
        echo -e "${WARNING} Security vulnerabilities detected - review before pushing"
        echo -e "${INFO} Run 'python $PYTHON_QUALITY_SCRIPT security --verbose' for details"
        
        read -p "Do you want to continue pushing despite security warnings? (y/N): " -n 1 -r
        echo
        if [[ ! $REPLY =~ ^[Yy]$ ]]; then
            echo -e "${INFO} Push cancelled. Please address security issues first."
            exit 1
        fi
    fi
    
    # Check code duplication
    DUPLICATION_SCRIPT="complete-quality-suite/editions/python/python-duplication-check.py"
    if [ -f "$DUPLICATION_SCRIPT" ]; then
        echo -e "\n${MAGNIFYING} Checking code duplication..."
        if python "$DUPLICATION_SCRIPT" --quiet; then
            echo -e "${CHECK} Code duplication within acceptable limits"
        else
            echo -e "${WARNING} High code duplication detected"
            echo -e "${INFO} Consider refactoring before pushing"
            echo -e "${INFO} Run 'python $DUPLICATION_SCRIPT --verbose' for details"
        fi
    fi
    
else
    END_TIME=$(date +%s)
    DURATION=$((END_TIME - START_TIME))
    
    echo -e "${ERROR} Quality checks failed! (${DURATION}s)"
    echo ""
    echo -e "${INFO} The following issues need to be addressed before pushing:"
    echo -e "  1. Run 'python $PYTHON_QUALITY_SCRIPT all --verbose' for detailed analysis"
    echo -e "  2. Fix the reported issues"
    echo -e "  3. Commit your fixes"
    echo -e "  4. Try pushing again"
    echo ""
    echo -e "${WARNING} Push cancelled due to quality check failures"
    exit 1
fi

# Final success message
echo ""
echo -e "${ROCKET} Pre-push quality validation completed successfully!"
echo -e "${CHECK} Your code is ready to be pushed to the remote repository"
echo ""
echo -e "${INFO} Quality standards met:"
echo -e "  ${CHECK} Code formatting (Black, isort)"
echo -e "  ${CHECK} Linting and type checking (Ruff, MyPy)"
echo -e "  ${CHECK} Security analysis (Bandit, Safety)"
echo -e "  ${CHECK} Code analysis (Vulture, Radon)"
echo ""
echo -e "${INFO} Branch ${BLUE}$CURRENT_BRANCH${NC} is ready for push"