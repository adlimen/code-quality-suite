# Complete Quality Suite - Python Edition
# Comprehensive Quality Checks Workflow

name: Python Quality Checks

on:
  push:
    branches: [ main, develop, feature/* ]
    paths:
      - '**.py'
      - 'pyproject.toml'
      - 'requirements*.txt'
      - '.github/workflows/python-quality.yml'
      - 'complete-quality-suite/editions/python/**'
  pull_request:
    branches: [ main, develop ]
    paths:
      - '**.py'
      - 'pyproject.toml'
      - 'requirements*.txt'
      - '.github/workflows/python-quality.yml'
      - 'complete-quality-suite/editions/python/**'

env:
  PYTHON_VERSION: '3.11'
  CACHE_KEY_PREFIX: python-quality-v1

jobs:
  # Quick formatting and linting checks (fast feedback)
  quick-checks:
    name: Quick Quality Checks
    runs-on: ubuntu-latest
    timeout-minutes: 5
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Cache quality tools
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ env.CACHE_KEY_PREFIX }}-${{ runner.os }}-pip-${{ hashFiles('complete-quality-suite/editions/python/requirements.template.txt') }}
          restore-keys: |
            ${{ env.CACHE_KEY_PREFIX }}-${{ runner.os }}-pip-
            
      - name: Install quality tools
        run: |
          python -m pip install --upgrade pip
          pip install -r complete-quality-suite/editions/python/requirements.template.txt
          
      - name: Make scripts executable
        run: |
          chmod +x complete-quality-suite/editions/python/python-quality-check.py
          chmod +x complete-quality-suite/editions/python/python-duplication-check.py
          
      - name: Run formatting checks
        run: |
          python complete-quality-suite/editions/python/python-quality-check.py formatting --quiet
          
      - name: Run linting checks
        run: |
          python complete-quality-suite/editions/python/python-quality-check.py linting --quiet

  # Comprehensive quality analysis
  comprehensive-analysis:
    name: Comprehensive Quality Analysis
    runs-on: ubuntu-latest
    needs: quick-checks
    timeout-minutes: 15
    
    strategy:
      matrix:
        python-version: ['3.8', '3.9', '3.10', '3.11', '3.12']
        
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ env.CACHE_KEY_PREFIX }}-${{ runner.os }}-py${{ matrix.python-version }}-${{ hashFiles('complete-quality-suite/editions/python/requirements.template.txt') }}
          restore-keys: |
            ${{ env.CACHE_KEY_PREFIX }}-${{ runner.os }}-py${{ matrix.python-version }}-
            
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r complete-quality-suite/editions/python/requirements.template.txt
          
          # Install project dependencies if they exist
          if [ -f "requirements.txt" ]; then
            pip install -r requirements.txt
          elif [ -f "pyproject.toml" ]; then
            pip install -e ".[dev]" || pip install -e .
          fi
          
      - name: Make scripts executable
        run: |
          chmod +x complete-quality-suite/editions/python/python-quality-check.py
          chmod +x complete-quality-suite/editions/python/python-duplication-check.py
          
      - name: Run all quality checks
        run: |
          python complete-quality-suite/editions/python/python-quality-check.py all --quiet
          
      - name: Generate quality report
        run: |
          # Create reports directory
          mkdir -p reports/python/
          
          # Run comprehensive analysis with reports
          python complete-quality-suite/editions/python/python-quality-check.py all --verbose > reports/python/quality-report-py${{ matrix.python-version }}.txt || true
          
      - name: Upload quality reports
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: quality-reports-py${{ matrix.python-version }}
          path: reports/python/
          retention-days: 30

  # Security analysis (separate job for better visibility)
  security-analysis:
    name: Security Analysis
    runs-on: ubuntu-latest
    needs: quick-checks
    timeout-minutes: 10
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Cache security tools
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ env.CACHE_KEY_PREFIX }}-security-${{ runner.os }}-${{ hashFiles('complete-quality-suite/editions/python/requirements.template.txt') }}
          restore-keys: |
            ${{ env.CACHE_KEY_PREFIX }}-security-${{ runner.os }}-
            
      - name: Install security tools
        run: |
          python -m pip install --upgrade pip
          pip install bandit[toml] safety
          
      - name: Make scripts executable
        run: |
          chmod +x complete-quality-suite/editions/python/python-quality-check.py
          
      - name: Run security analysis
        run: |
          python complete-quality-suite/editions/python/python-quality-check.py security --quiet
          
      - name: Generate security report
        run: |
          mkdir -p reports/security/
          
          # Generate detailed security reports
          if command -v bandit > /dev/null; then
            bandit -r . -f json -o reports/security/bandit-report.json || true
            bandit -r . -f txt -o reports/security/bandit-report.txt || true
          fi
          
          if command -v safety > /dev/null; then
            safety scan --json --output reports/security/safety-report.json || true
            safety scan --output reports/security/safety-report.txt || true
          fi
          
      - name: Upload security reports
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: security-reports
          path: reports/security/
          retention-days: 90
          
      - name: Comment security findings on PR
        if: github.event_name == 'pull_request' && failure()
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            try {
              const securityReport = fs.readFileSync('reports/security/bandit-report.txt', 'utf8');
              const body = `## 🔒 Security Analysis Results
              
Security vulnerabilities were detected in this PR. Please review and address the findings below:

\`\`\`
${securityReport}
\`\`\`

**Action Required**: Please fix the security issues before merging.`;

              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: body
              });
            } catch (error) {
              console.log('Could not read security report:', error.message);
            }

  # Code duplication analysis
  duplication-analysis:
    name: Code Duplication Analysis
    runs-on: ubuntu-latest
    needs: quick-checks
    timeout-minutes: 8
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Cache duplication tools
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ env.CACHE_KEY_PREFIX }}-duplication-${{ runner.os }}-${{ hashFiles('complete-quality-suite/editions/python/requirements.template.txt') }}
          
      - name: Install duplication analysis tools
        run: |
          python -m pip install --upgrade pip
          pip install ast astpretty
          
      - name: Make scripts executable
        run: |
          chmod +x complete-quality-suite/editions/python/python-duplication-check.py
          
      - name: Run duplication analysis
        run: |
          python complete-quality-suite/editions/python/python-duplication-check.py --verbose
          
      - name: Generate duplication report
        run: |
          mkdir -p reports/duplication/
          python complete-quality-suite/editions/python/python-duplication-check.py --format=json > reports/duplication/duplication-report.json || true
          
      - name: Upload duplication reports
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: duplication-reports
          path: reports/duplication/
          retention-days: 30

  # Quality gate (final check)
  quality-gate:
    name: Quality Gate
    runs-on: ubuntu-latest
    needs: [quick-checks, comprehensive-analysis, security-analysis, duplication-analysis]
    timeout-minutes: 5
    if: always()
    
    steps:
      - name: Check job results
        run: |
          echo "Quick checks: ${{ needs.quick-checks.result }}"
          echo "Comprehensive analysis: ${{ needs.comprehensive-analysis.result }}"
          echo "Security analysis: ${{ needs.security-analysis.result }}"
          echo "Duplication analysis: ${{ needs.duplication-analysis.result }}"
          
      - name: Quality gate passed
        if: needs.quick-checks.result == 'success' && needs.comprehensive-analysis.result == 'success' && needs.security-analysis.result == 'success' && needs.duplication-analysis.result == 'success'
        run: |
          echo "🎉 All quality checks passed!"
          echo "✅ Code is ready for merge"
          
      - name: Quality gate failed
        if: needs.quick-checks.result != 'success' || needs.comprehensive-analysis.result != 'success' || needs.security-analysis.result != 'success' || needs.duplication-analysis.result != 'success'
        run: |
          echo "❌ Quality gate failed!"
          echo "Please fix the issues reported in the failed jobs"
          exit 1